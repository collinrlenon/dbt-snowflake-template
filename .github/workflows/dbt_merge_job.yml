name: dbt Merge Job

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  #   paths-ignore:
  #     - '.github/artifacts/**'  # Ignore changes to artifacts directory, like when the manifest gets written back

permissions:
  contents: write
  actions: read
  issues: write
  pull-requests: write

jobs:
  dbt_merge_job:
    runs-on: ubuntu-latest

    # Add concurrency group to prevent parallel runs within the same PR
    # Only keep the latest run, cancel the prior
    # Manifest will not be uploaded by time of cancel, next merge job will run all changes
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: true

    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_DBT_USER: ${{ vars.SNOWFLAKE_DBT_USER }}
      SNOWFLAKE_DBT_PASSWORD: ${{ secrets.SNOWFLAKE_DBT_PASSWORD }}
      SNOWFLAKE_PRODUCTION_DATABASE: ${{ vars.SNOWFLAKE_PRODUCTION_DATABASE }}
      
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_COMMIT_SHA: ${{ github.sha }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_PR_COMMENT_NAME: Merge Job

      DBT_RUN_RESULTS: target/run_results.json
      DBT_STATE: .github/artifacts/
      DBT_DEFER: true
      DBT_FAVOR_STATE: true

    steps:
    
    ### SETUP
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: dbt debug
      run: dbt debug -t prod

    - name: dbt deps
      run: dbt deps -t prod
    
    ### DEPLOY DBT
    - name: dbt build
      id: dbt_build
      run: |
        if [ -f ".github/artifacts/manifest.json" ]; then
          echo "Found existing manifest.json - running build with state comparison"
          dbt build -s state:modified+ -t prod
        else
          echo "No existing manifest.json found - running full build without state comparison"
          export DBT_DEFER=false
          dbt build -t prod
        fi
      continue-on-error: true

    ### RESULT
    - name: Get PR number
      run: |
        # Extract PR number from API, searching by SHA
        pr_number=$(python .github/scripts/github_pr_from_sha.py)
        echo "GITHUB_PR_NUMBER=$pr_number" >> $GITHUB_ENV

    - name: Generate job summary
      if: env.GITHUB_PR_NUMBER != ''
      env:
        DBT_RUN_STATUS: ${{ steps.dbt_build.outcome }}
        GITHUB_PR_NUMBER: ${{ env.GITHUB_PR_NUMBER }}
      run: |
        python -u .github/scripts/dbt_job_summary.py > job_summary.md
        echo "JOB_SUMMARY_FILE=job_summary.md" >> $GITHUB_ENV

    - name: Add PR comment
      if: env.GITHUB_PR_NUMBER != ''
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ env.GITHUB_PR_NUMBER }}
        body-path: ${{ env.JOB_SUMMARY_FILE }}
      continue-on-error: true

    ### WRITEBACK
    - name: Save manifest
      run: |
        mkdir -p .github/artifacts
        cp target/manifest.json .github/artifacts/

    - name: Writeback manifest
      uses: actions-js/push@master
      with:
        github_token: ${{ env.GITHUB_TOKEN }}
        message: '[AUTO] Production manifest write-back'